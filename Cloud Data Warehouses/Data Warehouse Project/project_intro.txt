---------------- Project: Data Warehouse ----------------

- Introduction
A music streaming startup, Sparkify has grown their user base and song database and want to move their processes and data onto the cloud. Their data resides in S3, in a directory of JSON logs on user activity on the app, as well as a directory with JSON metadata on the songs in their app.

As their dara engineer, you are tasked with building an ETL pipeline that extracts their data from S3, stages them in Redshift and transforms data into a set of dimensional tables for their analytics team to continue finding insights in what songs their users are listening to. Youll be able to test your database and ETL pipeline by runnning queries given to you by the analytics team from Sparkify and compare your results with their expected results.


- Project Description
In this project you will appy what youve learned on data warehouses and AWS to buils an ETL pipeline for a database hosted on Redshift. To complete the project, you will need to load data from S3 to staging tables on Redshift and execute SQL statements that create the analytics tables from these storing tables.


---------------- Project Instructions ----------------

----- Fact table: -----
1. songplays - records in log data associated with song plays i.e. records with page 'NextSong' 
	•(songplay_id, start_time, user_id, level, song_id, artist_id, session_id, location, user_agent)


----- Dimension tables: -----

2. users - users in the app 
	•(user_id, first_name, last_name, gender, level)

3. songs - songs in music databe 
	•(song_id, title, artist_id, year, duration)

4. artists - artists in music database 
	•(artist_id, name, location, latitude, longitude)

5. time - timestamps of records in songplays broken down into specific units 
	•(start_time, hour, day, week, month, year, weekday)


---------------- Project Template ----------------

1. create_tables.py - where youll create your fact and dimension tables for the star schema in Redshift

2. etl.py - where youll load data from S3 into staging tables on Redshift and then process the data into your analytics tables on Redshift

3. sql_queries.py - where youll define your SQL statements, whoch will be imported into the two other files above

4. README.md - where youll provide discussion on your processes and decisions for this ETL pipeline


---------------- Project Steps ----------------

----- Create table schemas -----
1. Design schemas for your fact and dimension tables

2. Write a SQL CREATE statements for each of these tables in sql_queries.py

3. Complete the logic in create_tables.py to connect to the datase and create the tables

4. Write SQL DROP statements to drop tables in the beginning of create_tables.py if the tables already exist. This way you can run create_tables.py whenever you want to reset your database and test your ETL pipeline

5. Launch a Redshift cluster and create an IAM role that has access to S3

6. Add Redshift database and IAM role info to dwh.cfg

7. Test by running create_tables.py and checking the table schemas in your Redshift database. You can use Query Editor in the AWS Redshift console for this.


----- Build ETL pipeline -----
1. Implement the logic in etl.py to load data from S3 to staging tables in Redshift

2. Implement the logiv in etl.py to load data from staging tables to analytics tables on Redshift

3. Test by running etl.py afte running create_tables.py and running the analytic queries on your Redshift database to compare your results with the expected results

4. Delete your Redshift cluster when finished


----- Document process -----
1. Discuss the purpose of this database in context of the startup, Sparkify and their analytical goals

2. State and justify your database schema design and ETL pipeline

3. [Optional] Provide example queries and results for song play analysis









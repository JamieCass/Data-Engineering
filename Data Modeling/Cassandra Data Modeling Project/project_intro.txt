---------------- Project: Data Modeling with Cassandra ----------------
A startup called Sparkify wants to analyze the data they've been collecting on songs and user activity on their new music streaming app. The analytics team is particularly interested in understanding what songs users are listening to. Currently, there is no easy way to query the data to generate the results, since the data resides in a directory or CSV files on user activity on the app.

They'd like a data engineer to create an Apache Cassandra databse wich can create queries on song play data to answer the questions. Yuor role is to create a database for this analysis. You'll be able to test your database by running queries given to you by the analytics team from Sparkify to create results



---------------- Project Overview ----------------
In the project, you'll apply what you've learned on data modelling with Apache Cassandra and complete an ETL pipeline using Python. To complete the project, you will need to model your data by creating tables in Cassandra to run queries. You are provided with part of the ETL pipeline that transfers data from a set of CSV files within a directory to create streamlined CSV file to model and insert into Cassandra tables.



---------------- Project Template ----------------
The project template includes one Jupyter Notebook file in which:
• You will process the event_datafile_new.csv dataset to create a denormalized dataset.
• You will model the data tables keeping in mind the queries you need to run.
• You have been provided queries that you will need to model your data tables for.
• You will load the data into tables you create in Cassandra and run your queries.



---------------- Project Steps ----------------

----- Modelling your NoSQL database or Cassandra database -----

1. Design tables to answer the queries outlines in the project template.

2. Write Cassandra CREATE KEYSPACE and SET KEYSOACE statements.

3. Develop your CREATE statement for each of the tables to address each question.

4. Load the data with INSERT statement for eaxh of the tables.

5. Include IF NOT EXISTS clause in your CREATE statements to create tables only if the tables do not already exist. We reccomend you also include DROP TABLE for each table, this way you can run drop and create tables whenever you want to reset your database and test your ETL pipeline.

6. Test by running the proper select statements with the correct WHERE clause.



----- Build ETL Pipeline -----

1. Implement the logic in section Part 1 of the notebook template to iterate through each event file in event_data to process and create a new CSV file in Python.

2. Make necessary edits to Part 2 of the notebook template to include Cassadra CREATE and INSERT statements to load processed records into relevent tables in your data model

3. Test by running SELECT statements after running the queries on your database.




---------------- QUERIES for the 3 Tables ----------------

1. Give me the artist, song title and song length in the music app history that was heard during sessionId = 338 and itemInSession = 4







